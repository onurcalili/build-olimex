diff --git a/board/getek/common/board_detect.c b/board/getek/common/board_detect.c
new file mode 100644
index 0000000..d861ddf
--- /dev/null
+++ b/board/getek/common/board_detect.c
@@ -0,0 +1,185 @@
+#include <common.h>
+#include <i2c.h>
+#include <mmc.h>
+#include <spl.h>
+#include <asm/arch/spl.h>
+
+#include "board_detect.h"
+
+struct getek_eeprom *eeprom = GETEK_EEPROM_DATA;
+
+#if CONFIG_TARGET_GETEK_SOM204_A20
+static int getek_i2c_eeprom_init(void)
+{
+	int ret;
+
+	if ((ret = i2c_set_bus_num(GETEK_EEPROM_BUS)))
+		return ret;
+
+	if ((ret = i2c_probe(GETEK_EEPROM_ADDRESS)))
+		return ret;
+
+	return 0;
+}
+
+int getek_i2c_eeprom_read(void)
+{
+	uint32_t crc;
+	int ret;
+
+	if ((ret = getek_i2c_eeprom_init()))
+		return ret;
+
+	if ((ret = i2c_read(GETEK_EEPROM_ADDRESS, 0, 1, (uint8_t *)eeprom, 256)))
+		return ret;
+
+	if (eeprom->header != GETEK_EEPROM_MAGIC_HEADER) {
+		memset(eeprom, 0xFF, 256);
+		return 1;
+	}
+
+	crc = crc32(0L, (uint8_t *)eeprom, 252);
+	if (eeprom->crc != crc) {
+		memset(eeprom, 0xFF, 256);
+		return 1;
+	}
+
+	return 0;
+}
+
+int getek_mmc_eeprom_read(void)
+{
+	struct mmc *mmc = NULL;
+	unsigned long count;
+	int ret = 0;
+
+	ret = mmc_initialize(NULL);
+	if (ret)
+		return ret;
+
+	mmc = find_mmc_device((sunxi_get_boot_device() == BOOT_DEVICE_MMC1) ? 0 : 1);
+	if (!mmc)
+		return -ENODEV;
+
+	ret = mmc_init(mmc);
+	if (ret)
+		return ret;
+
+	count = blk_dread(mmc_get_blk_desc(mmc), GETEK_MMC_SECTOR, 1, eeprom);
+	if (!count)
+		return -EIO;
+
+	return ret;
+}
+
+#ifndef CONFIG_SPL_BUILD
+int getek_i2c_eeprom_write(void)
+{
+	uint8_t *data = (uint8_t *)eeprom;
+	uint16_t i;
+	int ret;
+
+	if ((ret = getek_i2c_eeprom_init())) {
+		printf("ERROR: Failed to init eeprom!\n");
+		return ret;
+	}
+
+	/* Restore magic header */
+	eeprom->header = GETEK_EEPROM_MAGIC_HEADER;
+
+	/* Calculate new chechsum */
+	eeprom->crc = crc32(0L, data, 252);
+
+	/* Write new values */
+	for(i = 0; i < 256; i += 16) {
+		if ((ret = i2c_write(GETEK_EEPROM_ADDRESS, i, 1, data + i , 16))) {
+			printf("ERROR: Failed to write eeprom!\n");
+			return ret;
+		}
+		mdelay(5);
+	}
+
+	return 0;
+}
+
+int getek_i2c_eeprom_erase(void)
+{
+	uint8_t *data = (uint8_t *)eeprom;
+	uint16_t i;
+	int ret;
+
+	/* Initialize EEPROM */
+	if ((ret = getek_i2c_eeprom_init())) {
+		printf("ERROR: Failed to init eeprom!\n");
+		return ret;
+	}
+
+	/* Erase previous data */
+	memset((uint8_t *)eeprom, 0xFF, 256);
+
+	/* Write data */
+	for(i = 0; i < 256; i += 16) {
+		if ((ret = i2c_write(GETEK_EEPROM_ADDRESS, i, 1, data + i, 16))) {
+			printf("ERROR: Failed to write eeprom!\n");
+			return ret;
+		}
+		mdelay(5);
+	}
+
+	return 0;
+}
+
+int getek_mmc_eeprom_write(void)
+{
+	struct mmc *mmc = NULL;
+	unsigned long count;
+	int ret = 0;
+
+	mmc = find_mmc_device((sunxi_get_boot_device() == BOOT_DEVICE_MMC1) ? 0 : 1);
+	if (!mmc)
+		return -ENODEV;
+
+	ret = mmc_init(mmc);
+	if (ret)
+		return ret;
+
+	count = blk_dwrite(mmc_get_blk_desc(mmc), GETEK_MMC_SECTOR, 1, eeprom);
+	if (!count)
+		return -EIO;
+
+	return ret;
+}
+
+int getek_mmc_eeprom_erase(void)
+{
+	struct mmc *mmc = NULL;
+	unsigned long count;
+	int ret = 0;
+
+	mmc = find_mmc_device((sunxi_get_boot_device() == BOOT_DEVICE_MMC1) ? 0 : 1);
+	if (!mmc)
+		return -ENODEV;
+
+	ret = mmc_init(mmc);
+	if (ret)
+		return ret;
+
+	count = blk_derase(mmc_get_blk_desc(mmc), GETEK_MMC_SECTOR, 1);
+	if (!count)
+		return -EIO;
+
+	return ret;
+
+}
+#endif
+
+bool getek_eeprom_is_valid(void)
+{
+	/*
+	 * If checksum during EEPROM initalization was wrong,
+	 * then the whole memory location should be empty.
+	 * Therefore it's enough to check the magic header
+	 */
+	return (eeprom->header == GETEK_EEPROM_MAGIC_HEADER);
+}
+#endif
diff --git a/board/getek/common/board_detect.h b/board/getek/common/board_detect.h
new file mode 100644
index 0000000..f2a35ce
--- /dev/null
+++ b/board/getek/common/board_detect.h
@@ -0,0 +1,56 @@
+#ifndef __BOARD_DETECT_H
+#define __BOARD_DETECT_H
+
+/**
+ * Location in the RAM.
+ * Content should be transfered after relocation
+ */
+#define GETEK_EEPROM_DATA ((struct getek_eeprom *)CONFIG_SYS_SDRAM_BASE)
+extern struct getek_eeprom *eeprom;
+
+/**
+ * Define EEPROM bus and address
+ */
+#define GETEK_EEPROM_BUS		I2C_1
+#define GETEK_EEPROM_ADDRESS		0x50
+#define GETEK_EEPROM_MAGIC_HEADER	0x4f4caa55
+
+/**
+ * In the board has corrupted EEPROM (or it's very old without one)
+ * a sector in the MMC can be used as backup storage.
+ */
+#define GETEK_MMC_SECTOR		0x0F	/* One sector before SPL */
+
+
+struct getek_eeprom {
+	uint32_t header;
+	uint32_t id;
+	struct {
+		char major;
+		char minor;
+	} revision;
+	uint32_t serial;
+	struct {
+		uint8_t storage;
+		uint8_t size;
+		uint8_t ram;
+		uint8_t grade;
+	} config;
+	char mac[12];
+	uint8_t reserved[222];
+	uint32_t crc;
+} __attribute__ ((__packed__));
+
+/* I2C access functions */
+int getek_i2c_eeprom_read(void);
+int getek_i2c_eeprom_write(void);
+int getek_i2c_eeprom_erase(void);
+
+/* Raw MMC access function */
+int getek_mmc_eeprom_read(void);
+int getek_mmc_eeprom_write(void);
+int getek_mmc_eeprom_erase(void);
+
+bool getek_eeprom_is_valid(void);
+
+#endif	/* __BOARD_DETECT_H */
diff --git a/board/getek/common/boards.c b/board/getek/common/boards.c
new file mode 100644
index 0000000..65ca691
--- /dev/null
+++ b/board/getek/common/boards.c
@@ -0,0 +1,158 @@
+#include <common.h>
+#include "board_detect.h"
+#include "boards.h"
+
+struct getek_boards getek_boards[] = {
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	/* A20-SOM204 */
+	{
+		GETEK_BOARD(8958, "A20-SOM204-1Gs16Me16G-MC", "sun7i-a20-som204-getek.dtb")
+		GETEK_CONFIG(EMMC, GBYTES(16), GBYTES(1), COM)
+	},
+
+	/* T2-SOM204 */
+	{
+		GETEK_BOARD(10157, "T2-SOM204-1Gs16Me4G-C-I", "sun7i-a20-som204-getek.dtb")
+		GETEK_CONFIG(EMMC, GBYTES(4), GBYTES(1), IND)
+	},
+	{
+		GETEK_BOARD(10234, "T2-SOM204-1Gs16Me8G-MC-I", "sun7i-a20-som204-getek.dtb")
+		GETEK_CONFIG(EMMC, GBYTES(8), GBYTES(1), IND)
+	},
+#endif
+	/* END */
+	{
+		.id = 0
+	},
+};
+
+
+const char *getek_get_board_name()
+{
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	struct getek_boards *board = getek_boards;
+
+	while (board->id) {
+		if (eeprom->id == board->id)
+			return board->name;
+		board++;
+	}
+	return "";
+#endif
+}
+
+const char *getek_get_board_fdt()
+{
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	struct getek_boards *board = getek_boards;
+
+	while (board->id) {
+		if (eeprom->id == board->id)
+			return board->fdt;
+		board++;
+	}
+#endif
+	return "";
+}
+
+#ifdef CONFIG_TARGET_GETEK_SOM204_A20
+bool getek_board_is_som204()
+{
+	switch (eeprom->id) {
+		case 8958:
+		case 10157:
+		case 10234:
+			return true;
+
+		default:
+			return false;
+	}
+}
+
+bool getek_board_has_spi(void)
+{
+	if (eeprom->config.storage == 's')
+		return true;
+
+	/* Some boards have both eMMC and SPI */
+	switch (eeprom->id) {
+		case 8958:		// A20-SOM204-1Gs16Me16G-MC
+		case 10157:		// T2-SOM204-1Gs16Me4G-C-I
+			return true;
+
+		default:
+			return false;
+	}
+}
+#endif
+
+const char * getek_get_lcd_pwr_pin()
+{
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	if (getek_board_is_som204())
+		return "PC24";
+	else
+		return "PC24";
+#endif
+}
+
+const char * getek_get_lcd_pwm_pin()
+{
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	return "PB2";
+#endif
+}
+
+const char *getek_get_lcd_irq_pin()
+{
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	if (getek_board_is_som204())
+		return "PH2";
+	else
+		return "PH2";
+#endif
+}
+
+const char *getek_get_lcd_rst_pin()
+{
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	if (getek_board_is_som204())
+		return "PI1";
+	else
+		return "PI1";
+#endif
+}
+
+const char *getek_get_usb_vbus_pin(uint8_t port)
+{
+	switch (port) {
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	case 0:
+		if (getek_board_is_som204())
+			return "PC17";
+		else
+			return "PC17";
+	case 1:
+		return "PH6";
+	case 2:
+		return "PH3";
+#endif
+	default:
+		return NULL;
+	}
+
+}
+
+const char *getek_get_usb_vbus_det_pin()
+{
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	return "PH5";
+#endif
+}
+
+const char *getek_get_usb_id_pin()
+{
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	return "PH4";
+#endif
+}
diff --git a/board/getek/common/boards.h b/board/getek/common/boards.h
new file mode 100644
index 0000000..d153613
--- /dev/null
+++ b/board/getek/common/boards.h
@@ -0,0 +1,62 @@
+#ifndef __BOARDS_H
+#define __BOARDS_H
+
+enum getek_storage {
+	STORAGE_NONE = 0,
+	STORAGE_EMMC = 'e',
+	STORAGE_NAND = 'n',
+	STORAGE_SPI = 's'
+};
+
+enum getek_grade {
+	GRADE_COM = 0,
+	GRADE_IND = 1,
+};
+
+enum getek_size {
+	S_1 = 0, S_2, S_4, S_8, S_16, S_32, S_64, S_128, S_256, S_512
+};
+
+#define BYTES(a)	( S_##a )
+#define KBYTES(a)	( S_##a + 10)
+#define MBYTES(a)	( S_##a + 20)
+#define GBYTES(a)	( S_##a + 30)
+
+#define GETEK_CONFIG(__storage, __size, __ram, __grade) \
+	.config = { STORAGE_##__storage, __size, __ram, GRADE_##__grade },
+
+#define GETEK_BOARD(__id, __name, __fdt) \
+	.id = __id, \
+	.name = __name, \
+	.fdt = __fdt,
+
+struct getek_boards {
+	uint32_t id;
+	const char name[32];
+	const char fdt[40];
+	uint8_t config[4];
+};
+
+extern struct getek_boards getek_boards[];
+
+const char *getek_get_board_name(void);
+const char *getek_get_board_fdt(void);
+
+/* LCD interface pins */
+const char *getek_get_lcd_pwm_pin(void);
+const char *getek_get_lcd_pwr_pin(void);
+const char *getek_get_lcd_irq_pin(void);
+const char *getek_get_lcd_rst_pin(void);
+
+/* USB pins */
+const char *getek_get_usb_vbus_pin(uint8_t port);
+const char *getek_get_usb_vbus_det_pin(void);
+const char *getek_get_usb_id_pin(void);
+
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+bool getek_board_is_som204(void);
+
+bool getek_board_has_spi(void);
+#endif
+
+#endif /* __BOARDS_H */
diff --git a/board/getek/common/cmd_getek.c b/board/getek/common/cmd_getek.c
new file mode 100644
index 0000000..24918ff
--- /dev/null
+++ b/board/getek/common/cmd_getek.c
@@ -0,0 +1,329 @@
+#include <common.h>
+#include <linux/ctype.h>
+
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+#include "board_detect.h"
+#include "boards.h"
+
+static int do_config_info(cmd_tbl_t *cmdtp, int flag,
+			  int argc, char *const argv[])
+{
+	char *mac = eeprom->mac;
+	const char *name;
+	uint8_t i;
+
+	if (getek_i2c_eeprom_read()) {
+		printf("Failed to read the current EEPROM configuration!\n");
+		return CMD_RET_FAILURE;
+	}
+	if (!getek_eeprom_is_valid()) {
+		printf("Current configuration in the EEPROM is not valid!\n"
+		       "Run \"getek config write\" to restore it.\n");
+		return CMD_RET_SUCCESS;
+	}
+
+	/* Get board info */
+	name = getek_get_board_name();
+
+	printf("Model: %s Rev.%c%c", name,
+	       (eeprom->revision.major < 'A' || eeprom->revision.major > 'Z') ?
+	       0 : eeprom->revision.major,
+	       (eeprom->revision.minor < '1' || eeprom->revision.minor > '9') ?
+	       0 : eeprom->revision.minor);
+
+	printf("\nSerial:%08X\n", eeprom->serial);
+	printf("MAC:   ");
+	for (i = 0; i < 12; i += 2 ) {
+		if (i < 10)
+			printf("%c%c:",
+				(mac[i] == 0xFF) ? 'F' : mac[i],
+				(mac[i+1] == 0xFF) ? 'F' : mac[i+1]);
+		else
+			printf("%c%c\n",
+				(mac[i] == 0xFF) ? 'F' : mac[i],
+				(mac[i+1] == 0xFF) ? 'F' : mac[i+1]);
+	}
+
+	return CMD_RET_SUCCESS;
+}
+
+static int do_config_list(cmd_tbl_t *cmdtp, int flag,
+			  int argc, char *const argv[])
+{
+	struct getek_boards *board;
+
+	printf("\nSupported boards:\n");
+	printf("----------------------------------------\n");
+
+	for (board = getek_boards; board->id != 0; board++)
+		printf("%-30s - %-10d\n", board->name, board->id);
+	return CMD_RET_SUCCESS;
+}
+
+static int do_config_write(cmd_tbl_t *cmdtp, int flag,
+			   int argc, char *const argv[])
+{
+	struct getek_boards *board = getek_boards;
+	struct getek_eeprom info;
+	uint32_t sid[4];
+	char mac[13];
+	uint32_t id;
+	uint8_t i = 0;
+	char *p;
+
+	if (argc < 3 || argc > 5)
+		return CMD_RET_USAGE;
+
+	memset(&info, 0xFF, 256);
+
+	id = simple_strtoul(argv[1], NULL, 10);
+	do {
+		if (board->id == id)
+			break;
+
+		board++;
+		if (board->id == 0) {
+			printf("%d is not valid ID!\n"
+			       "Run getek config list to get supported IDs.\n", id);
+			return CMD_RET_FAILURE;
+		}
+	} while (board->id != 0);
+
+	info.id = id;
+	memcpy(&info.config, board->config, 4);
+
+	info.revision.major = argv[2][0];
+	info.revision.minor = '\0';
+
+	/* Make uppercase */
+	info.revision.major = toupper(info.revision.major);
+
+	if (info.revision.major < 'A' || info.revision.major > 'Z') {
+		printf("%c in not valid revision!\n"
+		       "Revision should be one character: A, C, J, etc...\n", info.revision.major);
+		return CMD_RET_FAILURE;
+	}
+
+	if (argc > 3)
+		info.serial = simple_strtoul(argv[3], NULL, 16);
+
+
+	if (argc > 4) {
+		i = 0;
+		p = argv[4];
+		while (*p) {
+			if ((*p < '0' || *p > '9') && (*p < 'a' || *p > 'f') && (*p < 'A' || *p > 'F') && (*p != ':')) {
+				printf("Invalid character: %d(%c)!\n", *p, *p);
+				return CMD_RET_FAILURE;
+			}
+
+			if (*p != ':')
+				info.mac[i++] = toupper(*p);
+			p++;
+		};
+
+		if (i != 12) {
+			printf("Invalid MAC address lenght: %d!\n", i);
+			return CMD_RET_FAILURE;
+		}
+	} else {
+		sunxi_get_sid(sid);
+		if (sid[0] != 0) {
+
+			/* Ensure the NIC specific bytes of the mac are not all 0 */
+			if ((sid[3] & 0xffffff) == 0)
+				sid[3] |= 0x800000;
+
+			/* Non OUI / registered MAC address */
+			snprintf(&mac[0], 3, "%02X", 0x02);
+			snprintf(&mac[2], 3, "%02X", (sid[0] >>  0) & 0xff);
+			snprintf(&mac[4], 3, "%02X", (sid[3] >> 24) & 0xff);
+			snprintf(&mac[6], 3, "%02X", (sid[3] >> 16) & 0xff);
+			snprintf(&mac[8], 3, "%02X", (sid[3] >>  8) & 0xff);
+			snprintf(&mac[10], 3, "%02X", (sid[3] >>  0) & 0xff);
+
+			memcpy(&info.mac, &mac, 12);
+
+		}
+	}
+
+	printf("Erasing EEPROM configuration...\n");
+	if (getek_i2c_eeprom_erase()) {
+		printf("Erasing MMC configuration...\n");
+		if (getek_mmc_eeprom_erase())
+			return CMD_RET_FAILURE;
+	}
+
+
+	memcpy(eeprom, &info, 256);
+
+	printf("Writting EEPROM configuration...\n");
+	if (!getek_i2c_eeprom_write())
+		getek_i2c_eeprom_read();
+
+	printf("Writting MMC configuration...\n");
+	if (!getek_mmc_eeprom_write())
+		getek_mmc_eeprom_read();
+
+	return CMD_RET_SUCCESS;
+}
+
+static int do_config_erase(cmd_tbl_t *cmdtp, int flag,
+			   int argc, char *const argv[])
+{
+	printf("Erasing configuration EEPROM...\n");
+	return getek_i2c_eeprom_erase();
+}
+
+static cmd_tbl_t cmd_config[] = {
+	U_BOOT_CMD_MKENT(info,	1, 0, do_config_info,  "", ""),
+	U_BOOT_CMD_MKENT(list,	1, 0, do_config_list,  "", ""),
+	U_BOOT_CMD_MKENT(write, 5, 0, do_config_write, "", ""),
+	U_BOOT_CMD_MKENT(erase, 1, 0, do_config_erase, "", ""),
+};
+#endif
+
+#if defined(CONFIG_VIDEO_LCD_GETEK_PANEL) || defined(LCD_GETEK)
+#include "lcd_getek.h"
+
+static int do_monitor_list(cmd_tbl_t *cmdtp, int flag,
+			   int argc, char *const argv[])
+{
+	struct lcd_getek_board *lcd;
+
+	printf("\nSupported video outputs:\n");
+	printf("----------------------------------------\n");
+	printf("%-30s - Automatic LCD detection\n", "LCD-GETEK");
+	for (lcd = lcd_getek_boards; lcd->id != 0; lcd++)
+		printf("%-30s - Resolution %dx%d\n", lcd->info.name,
+						     lcd->mode.hactive,
+						     lcd->mode.vactive);
+	return CMD_RET_SUCCESS;
+}
+
+static int do_monitor_set(cmd_tbl_t *cmdtp, int flag,
+			  int argc, char *const argv[])
+{
+	struct lcd_getek_board *lcd = lcd_getek_boards;
+	char temp[32];
+	char *p;
+	int i;
+
+	if (argc < 2)
+		return CMD_RET_USAGE;
+
+	/* Convert to lowercase */
+	p = argv[1];
+	for (i = 0; i < strlen(p); i++) {
+		p[i] = tolower(p[i]);
+	}
+
+	if (!strcmp(p, "lcd-getek") && strlen(p) == 13) {
+		printf("Enabling Automatic LCD-GETEK detection...\n");
+		env_set_ulong("lcd_getek", 0);
+		return CMD_RET_SUCCESS;
+	} else {
+		while(lcd->id) {
+			/* Convert name to lowercase */
+			strcpy(temp, lcd->info.name);
+			for (i = 0; i < strlen(temp); i++)
+				temp[i] = tolower(temp[i]);
+
+			/* Compare name */
+			if (!strcmp(p, temp) && strlen(p) == strlen(temp)) {
+				printf("Enabling %s...\n", lcd->info.name);
+				env_set_ulong("lcd_getek", lcd->id);
+				return CMD_RET_SUCCESS;
+			}
+			lcd++;
+		}
+	}
+
+	printf("Invalid LCD! Run \"getek monitor list\" for supported devices.\n");
+
+	return CMD_RET_SUCCESS;
+}
+
+static cmd_tbl_t cmd_monitor[] = {
+	U_BOOT_CMD_MKENT(list, 1, 0, do_monitor_list, "", ""),
+	U_BOOT_CMD_MKENT(set, 2, 0, do_monitor_set, "", ""),
+};
+#endif
+
+
+static int do_getek_opts(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	cmd_tbl_t *cp;
+
+#if defined(CONFIG_VIDEO_GETEK_PANEL) || defined(LCD_GETEK)
+	if (!strcmp(argv[0], "monitor"))
+		cp = find_cmd_tbl(argv[1], cmd_monitor, ARRAY_SIZE(cmd_monitor));
+	else
+#endif
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	if (!strcmp(argv[0], "config"))
+		cp = find_cmd_tbl(argv[1], cmd_config, ARRAY_SIZE(cmd_config));
+	else
+#endif
+	return CMD_RET_USAGE;
+
+	argc--;
+	argv++;
+
+	if (cp == NULL || argc > cp->maxargs)
+		return CMD_RET_USAGE;
+	if (flag == CMD_FLAG_REPEAT && !cp->cmd_rep)
+		return CMD_RET_SUCCESS;
+
+	return cp->cmd(cmdtp, flag, argc, argv);
+}
+
+static cmd_tbl_t cmd_getek[] = {
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	U_BOOT_CMD_MKENT(config, CONFIG_SYS_MAXARGS, 0, do_getek_opts, "", ""),
+#endif
+#if defined(CONFIG_VIDEO_LCD_GETEK_PANEL) || defined(LCD_GETEK)
+	U_BOOT_CMD_MKENT(monitor, CONFIG_SYS_MAXARGS, 0, do_getek_opts, "", ""),
+#endif
+};
+
+static int do_getek_ops(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	cmd_tbl_t *cp;
+
+	cp = find_cmd_tbl(argv[1], cmd_getek, ARRAY_SIZE(cmd_getek));
+
+	argc--;
+	argv++;
+
+	if (cp == NULL || argc > cp->maxargs)
+		return CMD_RET_USAGE;
+	if (flag == CMD_FLAG_REPEAT && !cp->cmd_rep)
+		return CMD_RET_SUCCESS;
+
+	return cp->cmd(cmdtp, flag, argc, argv);
+}
+
+U_BOOT_CMD(
+	getek, 7, 0, do_getek_ops,
+	"GETEK board configurator",
+#if defined(CONFIG_TARGET_GETEK_SOM204_A20)
+	"config info		- Print current configuration: ID, serial, ram, storage, grade...\n"
+	"getek config list		- Print supported boards and their IDs\n"
+	"getek config erase		- Erase currently stored configuration\n"
+	"getek config write [id] [revision] [serial] [mac]\n"
+	"  arguments:\n"
+	"    [id]			- Specific board ID\n"
+	"    [revision]			- Board revision: C, D1, etc...\n"
+	"    [serial]			- New serial number for the board\n"
+	"    [mac]			- New MAC address for the board\n"
+	"				  Format can be:\n"
+	"					aa:bb:cc:dd:ee:ff\n"
+	"					FF:FF:FF:FF:FF:FF\n"
+	"					aabbccddeeff\n"
+#endif
+#if defined(CONFIG_VIDEO_LCD_GETEK_PANEL) || defined(LCD_GETEK)
+	"getek monitor list		- Print supported video outputs\n"
+	"getek monitor set		- Set specific LCD\n"
+#endif
+	);
diff --git a/board/getek/common/lcd_getek.c b/board/getek/common/lcd_getek.c
new file mode 100644
index 0000000..f64f64f
--- /dev/null
+++ b/board/getek/common/lcd_getek.c
@@ -0,0 +1,160 @@
+#include <common.h>
+#include <dm.h>
+#include <i2c.h>
+
+#include "lcd_getek.h"
+
+struct lcd_getek_board lcd_getek_boards[] = {
+	{
+		.id = LCD_GETEK_SATOZ_SAT043AT40D09RH,
+		.compatible = "getek,satoz-sat043at40d09rh",
+		{
+			.name = "LCD-SATOZ-SAT043AT40D09RH",
+			.bus_format = MEDIA_BUS_FMT_RGB888_1X24,
+		},
+		{
+			.pixelclock = 9000,
+			.hactive = 480,
+			.hfp = 8,
+			.hbp = 39,
+			.hpw = 4,
+			.vactive = 272,
+			.vfp = 4,
+			.vbp = 8,
+			.vpw = 8,
+			.refresh = 60,
+			.flags = 0
+		}
+
+	},
+	{
+		.id = 0,
+	},
+};
+
+#ifdef CONFIG_VIDEO_SUNXI
+char videomode[128];
+
+char * lcd_getek_video_mode()
+{
+	struct lcd_getek_mode *mode = NULL;
+	struct lcd_getek_info *info = NULL;
+	uint32_t id = LCD_GETEK_SATOZ_SAT043AT40D09RH;
+	uint32_t i;
+	int ret;
+
+
+	if (id) {
+		for (i = 0; i < ARRAY_SIZE(lcd_getek_boards); i++) {
+			if (lcd_getek_boards[i].id == id) {
+				info = &lcd_getek_boards[i].info;
+				mode = &lcd_getek_boards[i].mode;
+				break;
+			}
+		}
+	}
+
+	sprintf(videomode, "x:%d,y:%d,depth:%d,pclk_khz:%d,le:%d,ri:%d,up:%d,lo:%d,hs:%d,vs:%d,sync:3,vmode:0",
+		mode->hactive,
+		mode->vactive,
+		(info->bus_format == MEDIA_BUS_FMT_RGB888_1X24) ? 24 : 18,
+		mode->pixelclock,
+		mode->hbp,
+		mode->hfp,
+		mode->vbp,
+		mode->vfp,
+		mode->hpw,
+		mode->vpw);
+
+
+	return videomode;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_DE2
+int lcd_getek_init(void)
+{
+	return 0;
+}
+#endif
+
+
+
+/**
+ * lcd_getek_is_present() - Check if display panel is present
+ *
+ * Always assume present.
+ *
+ * @return true of present, false - not present
+ */
+bool lcd_getek_is_present(void)
+{
+	return true;
+}
+
+/**
+ * lcd_getek_compatible() - Get LCD compatible string
+ *
+ * @return compatible string
+ */
+char * lcd_getek_compatible(void)
+{
+	uint32_t id = LCD_GETEK_SATOZ_SAT043AT40D09RH;
+	uint32_t i;
+
+	for (i = 0; i < ARRAY_SIZE(lcd_getek_boards); i++) {
+		if (lcd_getek_boards[i].id == id)
+			return lcd_getek_boards[i].compatible;
+	}
+
+	return "getek,lcd-getek";
+}
+
+/**
+ * lcd_getek_dclk_phase() - Get LCD dclk phase
+ *
+ * @return phase 0 to 3
+ */
+uint8_t lcd_getek_dclk_phase(void)
+{
+	return 0;
+}
+
+/**
+ * lcd_getek_interface() - Get LCD interface
+ *
+ * Check if connected LCD interface is either
+ *
+ * @return interface number
+ */
+uint8_t lcd_getek_interface(void)
+{
+	/* Check LVDS or PARALLEL */
+	return LCD_GETEK_IF_PARALLEL;
+}
+
+/**
+ * lcd_getek_get_data() - Get data for static described LCD
+ *
+ * @return lcd data structure or NULL
+ */
+struct lcd_getek_board * lcd_getek_get_data()
+{
+	uint32_t id = LCD_GETEK_SATOZ_SAT043AT40D09RH;
+	uint32_t i;
+
+	if (!id)
+		return NULL;
+
+	for (i = 0; i < ARRAY_SIZE(lcd_getek_boards); i++) {
+		if (lcd_getek_boards[i].id == id)
+			return &lcd_getek_boards[i];
+	}
+
+	return NULL;
+}
+
+uint32_t lcd_getek_id(void)
+{
+	return LCD_GETEK_SATOZ_SAT043AT40D09RH;
+}
diff --git a/board/getek/common/lcd_getek.h b/board/getek/common/lcd_getek.h
new file mode 100644
index 0000000..f77db61
--- /dev/null
+++ b/board/getek/common/lcd_getek.h
@@ -0,0 +1,57 @@
+#ifndef __LCD_GETEK_H
+#define __LCD_GETEK_H
+
+#define MEDIA_BUS_FMT_RGB888_1X24               0x100a
+
+#define LCD_GETEK_IF_PARALLEL	0
+#define LCD_GETEK_IF_LVDS		1
+
+#define LCD_GETEK_SATOZ_SAT043AT40D09RH	1
+
+struct lcd_getek_mode {
+	u32 pixelclock;
+	u32 hactive;
+	u32 hfp;
+	u32 hbp;
+	u32 hpw;
+	u32 vactive;
+	u32 vfp;
+	u32 vbp;
+	u32 vpw;
+	u32 refresh;
+	u32 flags;
+};
+
+struct lcd_getek_info {
+	char name[32];
+	u32 width_mm;
+	u32 height_mm;
+	u32 bpc;
+	u32 bus_format;
+	u32 bus_flag;
+} __attribute__((__packed__));
+
+struct lcd_getek_board {
+	uint32_t id;
+	char compatible[32];
+	struct lcd_getek_info info;
+	struct lcd_getek_mode mode;
+};
+
+extern struct lcd_getek_board lcd_getek_boards[];
+
+bool lcd_getek_is_present(void);
+
+#ifdef CONFIG_VIDEO_SUNXI
+char * lcd_getek_video_mode(void);
+uint8_t lcd_getek_dclk_phase(void);
+uint8_t lcd_getek_interface(void);
+#endif
+#ifdef CONFIG_VIDEO_DE2
+int lcd_getek_init(void);
+#endif
+uint32_t lcd_getek_id(void);
+char * lcd_getek_compatible(void);
+struct lcd_getek_board * lcd_getek_get_data(void);
+
+#endif /* __LCD_GETEK_H */
diff --git a/board/getek/getek_som204_a20/Kconfig b/board/getek/getek_som204_a20/Kconfig
new file mode 100644
index 0000000..89ba027
--- /dev/null
+++ b/board/getek/getek_som204_a20/Kconfig
@@ -0,0 +1,12 @@
+if TARGET_GETEK_SOM204_A20
+
+config SYS_BOARD
+	default "getek_som204_a20"
+
+config SYS_VENDOR
+	default "getek"
+
+config SYS_CONFIG_NAME
+	default "getek_som204_a20"
+
+endif
diff --git a/board/getek/getek_som204_a20/MAINTAINERS b/board/getek/getek_som204_a20/MAINTAINERS
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/board/getek/getek_som204_a20/MAINTAINERS
@@ -0,0 +1 @@
+
diff --git a/board/getek/getek_som204_a20/Makefile b/board/getek/getek_som204_a20/Makefile
new file mode 100644
index 0000000..92aa228
--- /dev/null
+++ b/board/getek/getek_som204_a20/Makefile
@@ -0,0 +1,11 @@
+obj-y	+= board.o
+obj-y	+= ../common/board_detect.o
+obj-y	+= ../../sunxi/dram_sun5i_auto.o
+
+ifndef CONFIG_SPL_BUILD
+obj-y	+= ../common/boards.o
+obj-y	+= ../common/cmd_getek.o
+obj-$(CONFIG_VIDEO_LCD_PANEL_GETEK)	+= ../common/lcd_getek.o
+obj-$(CONFIG_SUNXI_AHCI)	+= ../../sunxi/ahci.o
+obj-$(CONFIG_OF_LIBFDT)		+= fdt.o
+endif
diff --git a/board/getek/getek_som204_a20/board.c b/board/getek/getek_som204_a20/board.c
new file mode 100644
index 0000000..367e079
--- /dev/null
+++ b/board/getek/getek_som204_a20/board.c
@@ -0,0 +1,804 @@
+#include <common.h>
+#include <dm.h>
+#include <environment.h>
+#include <axp_pmic.h>
+#include <generic-phy.h>
+#include <phy-sun4i-usb.h>
+#include <netdev.h>
+#include <miiphy.h>
+#include <nand.h>
+#include <mmc.h>
+#include <spl.h>
+#include <cli.h>
+#include <asm/arch/display.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/dram.h>
+#include <asm/arch/gpio.h>
+#include <asm/arch/cpu.h>
+#include <asm/arch/mmc.h>
+#include <asm/arch/spl.h>
+#include <asm/armv7.h>
+#include <asm/setup.h>
+#include <asm/gpio.h>
+#include <asm/io.h>
+#include <linux/ctype.h>
+
+#include <dm/uclass-internal.h>
+#include <dm/device-internal.h>
+
+#include "../common/board_detect.h"
+#include "../common/boards.h"
+
+#define GMAC_MODE_RGMII		0
+#define GMAC_MODE_MII		1
+
+DECLARE_GLOBAL_DATA_PTR;
+
+void eth_init_board(void)
+{
+	static struct sunxi_ccm_reg *const ccm =
+		(struct sunxi_ccm_reg *)SUNXI_CCM_BASE;
+	uint8_t tx_delay = 0;
+	uint8_t mode;
+	int pin;
+
+	if (!getek_eeprom_is_valid())
+		return;
+
+ 	mode = GMAC_MODE_RGMII;
+
+	if (getek_board_is_som204()) {
+		tx_delay = 4;
+	}
+
+	/* Set up clock gating */
+	setbits_le32(&ccm->ahb_gate1, 0x1 << AHB_GATE_OFFSET_GMAC);
+
+	if (mode == GMAC_MODE_RGMII) {
+		setbits_le32(&ccm->gmac_clk_cfg,
+			     CCM_GMAC_CTRL_TX_CLK_DELAY(tx_delay));
+		setbits_le32(&ccm->gmac_clk_cfg,
+			     CCM_GMAC_CTRL_TX_CLK_SRC_INT_RGMII |
+			     CCM_GMAC_CTRL_GPIT_RGMII);
+	} else {
+		setbits_le32(&ccm->gmac_clk_cfg,
+			     CCM_GMAC_CTRL_TX_CLK_SRC_MII |
+			     CCM_GMAC_CTRL_GPIT_MII);
+	}
+
+	/* Configure pins for GMAC */
+	for (pin = SUNXI_GPA(0); pin <= SUNXI_GPA(16); pin++) {
+
+		/* skip unused pins in RGMII mode */
+		if (mode == GMAC_MODE_RGMII ) {
+			if (pin == SUNXI_GPA(9) || pin == SUNXI_GPA(14))
+				continue;
+		}
+
+		sunxi_gpio_set_cfgpin(pin, SUN7I_GPA_GMAC);
+		sunxi_gpio_set_drv(pin, 3);
+	}
+}
+
+void i2c_init_board(void)
+{
+#ifdef CONFIG_I2C0_ENABLE
+	sunxi_gpio_set_cfgpin(SUNXI_GPB(0), SUN4I_GPB_TWI0);
+	sunxi_gpio_set_cfgpin(SUNXI_GPB(1), SUN4I_GPB_TWI0);
+	clock_twi_onoff(0, 1);
+#endif
+
+#ifdef CONFIG_I2C1_ENABLE
+	sunxi_gpio_set_cfgpin(SUNXI_GPB(18), SUN4I_GPB_TWI1);
+	sunxi_gpio_set_cfgpin(SUNXI_GPB(19), SUN4I_GPB_TWI1);
+	clock_twi_onoff(1, 1);
+#endif
+
+#if defined(CONFIG_I2C2_ENABLE) && !defined(CONFIG_SPL_BUILD)
+	sunxi_gpio_set_cfgpin(SUNXI_GPB(20), SUN4I_GPB_TWI2);
+	sunxi_gpio_set_cfgpin(SUNXI_GPB(21), SUN4I_GPB_TWI2);
+	clock_twi_onoff(2, 1);
+#endif
+}
+
+#if defined(CONFIG_ENV_IS_IN_SPI_FLASH) || defined(CONFIG_ENV_IS_IN_FAT) || defined(CONFIG_ENV_IS_IN_EXT4)
+enum env_location env_get_location(enum env_operation op, int prio)
+{
+	uint32_t boot = sunxi_get_boot_device();
+
+	switch (boot) {
+		/* In case of FEL boot check board storage */
+		case BOOT_DEVICE_BOARD:
+			if (getek_eeprom_is_valid() &&
+			    eeprom->config.storage == 's') {
+				switch (prio) {
+					case 0:
+						return ENVL_SPI_FLASH;
+					case 1:
+						return ENVL_EXT4;
+					case 2:
+						return ENVL_FAT;
+					default:
+						return ENVL_UNKNOWN;
+				}
+			} else {
+				if (prio == 0)
+					return ENVL_EXT4;
+				else if (prio == 1)
+					return ENVL_FAT;
+				else
+					return ENVL_UNKNOWN;
+
+			}
+
+		case BOOT_DEVICE_SPI:
+			return (prio == 0) ? ENVL_SPI_FLASH : ENVL_UNKNOWN;
+
+		case BOOT_DEVICE_MMC1:
+		case BOOT_DEVICE_MMC2:
+			if (prio == 0)
+				return ENVL_EXT4;
+			else if (prio == 1)
+				return ENVL_FAT;
+			else
+				return ENVL_UNKNOWN;
+
+		default:
+			return ENVL_UNKNOWN;
+	}
+}
+#endif
+
+#if defined(CONFIG_ENV_IS_IN_EXT4)
+char *get_fat_device_and_part(void)
+{
+	uint32_t boot = sunxi_get_boot_device();
+
+	switch (boot) {
+		case BOOT_DEVICE_MMC1:
+			return "0:auto";
+		case BOOT_DEVICE_MMC2:
+			return "1:auto";
+		default:
+			return CONFIG_ENV_EXT4_DEVICE_AND_PART;
+	}
+}
+#endif
+
+/* add board specific code here */
+int board_init(void)
+{
+	__maybe_unused int id_pfr1, ret, satapwr_pin, macpwr_pin, btpwr_pin;
+	__maybe_unused struct udevice *dev;
+
+	gd->bd->bi_boot_params = (PHYS_SDRAM_0 + 0x100);
+
+	asm volatile("mrc p15, 0, %0, c0, c1, 1" : "=r"(id_pfr1));
+	debug("id_pfr1: 0x%08x\n", id_pfr1);
+	/* Generic Timer Extension available? */
+	if ((id_pfr1 >> CPUID_ARM_GENTIMER_SHIFT) & 0xf) {
+		uint32_t freq;
+
+		debug("Setting CNTFRQ\n");
+
+		/*
+		 * CNTFRQ is a secure register, so we will crash if we try to
+		 * write this from the non-secure world (read is OK, though).
+		 * In case some bootcode has already set the correct value,
+		 * we avoid the risk of writing to it.
+		 */
+		asm volatile("mrc p15, 0, %0, c14, c0, 0" : "=r"(freq));
+		if (freq != COUNTER_FREQUENCY) {
+			debug("arch timer frequency is %d Hz, should be %d, fixing ...\n",
+			      freq, COUNTER_FREQUENCY);
+#ifdef CONFIG_NON_SECURE
+			printf("arch timer frequency is wrong, but cannot adjust it\n");
+#else
+			asm volatile("mcr p15, 0, %0, c14, c0, 0"
+				     : : "r"(COUNTER_FREQUENCY));
+#endif
+		}
+	}
+
+	axp_gpio_init();
+
+	if (getek_eeprom_is_valid()) {
+		/*
+		 * Setup SATAPWR
+		 */
+		satapwr_pin =  0;/* Sata is disabled sunxi_name_to_gpio("PC3"); */
+
+		if(satapwr_pin > 0) {
+			gpio_request(satapwr_pin, "satapwr");
+			gpio_direction_output(satapwr_pin, 1);
+			/* Give attached sata device time to power-up to avoid link timeouts */
+			mdelay(500);
+		}
+
+#ifdef CONFIG_DM_SPI_FLASH
+		if (getek_board_has_spi()) {
+
+			ret = uclass_first_device(UCLASS_SPI_FLASH, &dev);
+			if (ret) {
+				printf("Failed to find SPI flash device\n");
+				return 0;
+			}
+
+			ret = device_probe(dev);
+			if (ret) {
+				printf("Failed to probe SPI flash device\n");
+				return 0;
+			}
+		}
+#endif
+	}
+
+	return 0;
+}
+
+int dram_init(void)
+{
+	gd->ram_size = get_ram_size((long *)PHYS_SDRAM_0, PHYS_SDRAM_0_SIZE);
+
+	return 0;
+}
+
+#ifdef CONFIG_NAND_SUNXI
+static void nand_pinmux_setup(void)
+{
+	unsigned int pin;
+
+	for (pin = SUNXI_GPC(0); pin <= SUNXI_GPC(2); pin++)
+		sunxi_gpio_set_cfgpin(pin, SUNXI_GPC_NAND);
+	for (pin = SUNXI_GPC(4); pin <= SUNXI_GPC(6); pin++)
+		sunxi_gpio_set_cfgpin(pin, SUNXI_GPC_NAND);
+	for (pin = SUNXI_GPC(4); pin <= SUNXI_GPC(6); pin++)
+		sunxi_gpio_set_cfgpin(pin, SUNXI_GPC_NAND);
+	for (pin = SUNXI_GPC(8); pin <= SUNXI_GPC(15); pin++)
+		sunxi_gpio_set_cfgpin(pin, SUNXI_GPC_NAND);
+}
+
+static void nand_clock_setup(void)
+{
+	struct sunxi_ccm_reg *const ccm =
+		(struct sunxi_ccm_reg *)SUNXI_CCM_BASE;
+
+	setbits_le32(&ccm->ahb_gate0, (CLK_GATE_OPEN << AHB_GATE_OFFSET_NAND0));
+	setbits_le32(&ccm->nand0_clk_cfg, CCM_NAND_CTRL_ENABLE | AHB_DIV_1);
+}
+
+void board_nand_init(void)
+{
+	if (eeprom->config.storage != 'n')
+		return;
+
+	nand_pinmux_setup();
+	nand_clock_setup();
+#ifndef CONFIG_SPL_BUILD
+	sunxi_nand_init();
+#endif
+}
+#endif /* CONFIG_NAND_SUNXI */
+
+#ifdef CONFIG_MMC
+static void mmc_pinmux_setup(int sdc)
+{
+	unsigned int pin;
+
+	switch (sdc) {
+	case 0:
+		/* SDC0: PF0-PF5 */
+		for (pin = SUNXI_GPF(0); pin <= SUNXI_GPF(5); pin++) {
+			sunxi_gpio_set_cfgpin(pin, SUNXI_GPF_SDC0);
+			sunxi_gpio_set_drv(pin, 2);
+		}
+		break;
+
+	case 2:
+		/* SDC2: PC6-PC11 */
+		for (pin = SUNXI_GPC(6); pin <= SUNXI_GPC(11); pin++) {
+			sunxi_gpio_set_cfgpin(pin, SUNXI_GPC_SDC2);
+			sunxi_gpio_set_pull(pin, SUNXI_GPIO_PULL_UP);
+			sunxi_gpio_set_drv(pin, 2);
+		}
+		break;
+
+	case 3:
+		/* SDC3: PI4-PI9 */
+		for (pin = SUNXI_GPI(4); pin <= SUNXI_GPI(9); pin++) {
+			sunxi_gpio_set_cfgpin(pin, SUNXI_GPI_SDC3);
+			sunxi_gpio_set_drv(pin, 2);
+		}
+		break;
+
+	default:
+		break;
+	}
+}
+
+int board_mmc_init(bd_t *bis)
+{
+	struct mmc *mmc;
+
+	/* Try to initialize MMC0 */
+	mmc_pinmux_setup(0);
+	mmc = sunxi_mmc_init(0);
+	if (!mmc) {
+		printf("Failed to init MMC0!\n");
+		return -1;
+	}
+
+	/* Initialize MMC2 on boards with eMMC */
+	if (eeprom->config.storage == 'e') {
+		mmc_pinmux_setup(2);
+		mmc = sunxi_mmc_init(2);
+		if (!mmc) {
+			printf("Failed to init MMC2!\n");
+			return -1;
+		}
+	}
+
+	return 0;
+}
+#ifndef CONFIG_SPL_BUILD
+int mmc_get_env_dev(void)
+{
+	unsigned long bootdev = 0;
+	char *bootdev_string;
+
+	bootdev_string = env_get("mmc_bootdev");
+
+	if (bootdev_string) {
+		bootdev = simple_strtoul(bootdev_string, NULL, 10);
+	}
+	return bootdev;
+}
+#endif /* !CONFIG_SPL_BUILD */
+
+#endif /* CONFIG_MMC */
+
+#ifdef CONFIG_BOARD_EARLY_INIT_R
+int board_early_init_r(void)
+{
+#ifdef CONFIG_MMC
+	mmc_pinmux_setup(0);
+
+	if (eeprom->config.storage == 'e')
+		mmc_pinmux_setup(2);
+#endif
+	return 0;
+}
+#endif /* CONFIG_BOARD_EARLY_INIT_R */
+
+void sunxi_board_init(void)
+{
+	int power_failed = 0;
+
+	power_failed = axp_init();
+	if (power_failed)
+		printf("axp_init failed!\n");
+
+	power_failed |= axp_set_dcdc2(CONFIG_AXP_DCDC2_VOLT);
+	power_failed |= axp_set_dcdc3(CONFIG_AXP_DCDC3_VOLT);
+	power_failed |= axp_set_aldo2(CONFIG_AXP_ALDO2_VOLT);
+	power_failed |= axp_set_aldo3(CONFIG_AXP_ALDO3_VOLT);
+	power_failed |= axp_set_aldo4(CONFIG_AXP_ALDO4_VOLT);
+
+	printf("DRAM:");
+	gd->ram_size = sunxi_dram_init();
+	printf(" %d MiB\n", (int)(gd->ram_size >> 20));
+	if (!gd->ram_size)
+		hang();
+
+	/*
+	 * Only clock up the CPU to full speed if we are reasonably
+	 * assured it's being powered with suitable core voltage
+	 */
+	if (!power_failed)
+		clock_set_pll1(CONFIG_SYS_CLK_FREQ);
+	else
+		printf("Failed to set core voltage! Can't set CPU frequency\n");
+
+}
+
+#if defined(CONFIG_SPL_BOARD_INIT)
+void spl_board_init(void)
+{
+	uint32_t bootdev;
+
+	/* First try loading from EEPROM */
+	printf("EEPROM: ");
+	if (getek_i2c_eeprom_read()) {
+		printf("Error\n");
+
+		/* If booted from eMMC/MMC try loading configuration */
+		bootdev = spl_boot_device();
+		if (bootdev != BOOT_DEVICE_MMC1 && bootdev != BOOT_DEVICE_MMC2)
+			return;
+		printf("MMC:    ");
+		if (getek_mmc_eeprom_read()) {
+			printf("Error\n");
+			return;
+		}
+	}
+	printf("Ready\n");
+
+	/* Check if content is valid */
+	printf("Config: %s\n", getek_eeprom_is_valid() ? "Valid" : "Corrupted");
+}
+#endif
+
+#ifndef CONFIG_SPL_BUILD
+
+#ifdef CONFIG_USB_GADGET
+int g_dnl_board_usb_cable_connected(void)
+{
+	struct udevice *dev;
+	struct phy phy;
+	int ret;
+
+	ret = uclass_get_device(UCLASS_USB_GADGET_GENERIC, 0, &dev);
+	if (ret) {
+		pr_err("%s: Cannot find USB device\n", __func__);
+		return ret;
+	}
+
+	ret = generic_phy_get_by_name(dev, "usb", &phy);
+	if (ret) {
+		pr_err("failed to get %s USB PHY\n", dev->name);
+		return ret;
+	}
+
+	ret = generic_phy_init(&phy);
+	if (ret) {
+		pr_err("failed to init %s USB PHY\n", dev->name);
+		return ret;
+	}
+
+	return sun4i_usb_phy_vbus_detect(&phy);
+	if (ret == 1)
+		return -ENODEV;
+
+	return ret;
+}
+#endif /* CONFIG_USB_GADGET */
+
+#ifdef CONFIG_SERIAL_TAG
+void get_board_serial(struct tag_serialnr *serialnr)
+{
+	char *serial_string;
+	unsigned long long serial;
+
+	serial_string = env_get("serial#");
+
+	if (serial_string) {
+		serial = simple_strtoull(serial_string, NULL, 16);
+
+		serialnr->high = (unsigned int) (serial >> 32);
+		serialnr->low = (unsigned int) (serial & 0xffffffff);
+	} else {
+		serialnr->high = 0;
+		serialnr->low = 0;
+	}
+}
+#endif /* CONFIG_SERIAL_TAG */
+
+/*
+ * Check the SPL header for the "sunxi" variant. If found: parse values
+ * that might have been passed by the loader ("fel" utility), and update
+ * the environment accordingly.
+ */
+static void parse_spl_header(const uint32_t spl_addr)
+{
+	struct boot_file_head *spl = (void *)(ulong)spl_addr;
+	if (memcmp(spl->spl_signature, SPL_SIGNATURE, 3) != 0)
+		return; /* signature mismatch, no usable header */
+
+	uint8_t spl_header_version = spl->spl_signature[3];
+	if (spl_header_version != SPL_HEADER_VERSION) {
+		printf("sunxi SPL version mismatch: expected %u, got %u\n",
+		       SPL_HEADER_VERSION, spl_header_version);
+		return;
+	}
+	if (!spl->fel_script_address)
+		return;
+
+	if (spl->fel_uEnv_length != 0) {
+		/*
+		 * data is expected in uEnv.txt compatible format, so "env
+		 * import -t" the string(s) at fel_script_address right away.
+		 */
+		himport_r(&env_htab, (char *)(uintptr_t)spl->fel_script_address,
+			  spl->fel_uEnv_length, '\n', H_NOCLEAR, 0, 0, NULL);
+		return;
+	}
+	/* otherwise assume .scr format (mkimage-type script) */
+	env_set_hex("fel_scriptaddr", spl->fel_script_address);
+
+}
+/*
+ * Note this function gets called multiple times.
+ * It must not make any changes to env variables which already exist.
+ */
+static void setup_environment(const void *fdt)
+{
+	unsigned int sid[4];
+	uint8_t mac_addr[6] = { 0, 0, 0, 0, 0, 0 };
+	char ethaddr[16], digit[3], strrev[3];
+	char cmd[40];
+	int i, ret;
+	char *p;
+
+	if (getek_eeprom_is_valid()) {
+
+		env_set_ulong("board_id", eeprom->id);
+		env_set("board_name", getek_get_board_name());
+
+		strrev[0] = (eeprom->revision.major < 'A' || eeprom->revision.major > 'Z') ? 0 : eeprom->revision.major;
+		strrev[1] = (eeprom->revision.minor < '1' || eeprom->revision.minor > '9') ? 0 : eeprom->revision.minor;
+		strrev[2] = 0;
+		env_set("board_rev", strrev);
+
+
+		p = eeprom->mac;
+		for (i = 0; i < 6; i++) {
+			sprintf(digit, "%c%c",
+				(p[i * 2] == 0xFF) ? 'F' : p[i * 2],
+				(p[i * 2 + 1] == 0xFF) ? 'F' : p[i * 2 + 1]);
+			mac_addr[i] = simple_strtoul(digit, NULL, 16);
+		}
+
+		if (fdt_get_alias(fdt, "ethernet0"))
+			if (!env_get("ethaddr"))
+				eth_env_set_enetaddr("ethaddr", mac_addr);
+
+		if (fdt_get_alias(fdt, "ethernet2")) {
+			if (!strncmp(p, "301F9AD", 7))
+				mac_addr[0] |= 0x02;
+			if (!env_get("eth2addr"))
+				eth_env_set_enetaddr("eth2addr", mac_addr);
+		}
+
+		/**
+		 * Setup mtdparts
+		 * A20-SOM204-1Gs16Me16G-MC
+		 */
+		if (getek_board_has_spi()) {
+			env_set("mtdids", SPI_MTDIDS);
+			env_set("mtdparts", SPI_MTDPARTS);
+		} else if (eeprom->config.storage == 'n') {
+#if defined(CONFIG_NAND)
+			env_set("mtdids", NAND_MTDIDS);
+			env_set("mtdparts", NAND_MTDPARTS);
+#endif
+		}
+	}
+
+	ret = sunxi_get_sid(sid);
+	if (ret == 0 && sid[0] != 0) {
+
+		/* Ensure the NIC specific bytes of the mac are not all 0 */
+		if ((sid[3] & 0xffffff) == 0)
+			sid[3] |= 0x800000;
+
+		for (i = 0; i < 4; i++) {
+			sprintf(ethaddr, "ethernet%d", i);
+			if (!fdt_get_alias(fdt, ethaddr))
+				continue;
+
+			if (i == 0)
+				strcpy(ethaddr, "ethaddr");
+			else
+				sprintf(ethaddr, "eth%daddr", i);
+
+			/* Non OUI / registered MAC address */
+			mac_addr[0] = (i << 4) | 0x02;
+			mac_addr[1] = (sid[0] >>  0) & 0xff;
+			mac_addr[2] = (sid[3] >> 24) & 0xff;
+			mac_addr[3] = (sid[3] >> 16) & 0xff;
+			mac_addr[4] = (sid[3] >>  8) & 0xff;
+			mac_addr[5] = (sid[3] >>  0) & 0xff;
+
+			if (!env_get(ethaddr))
+				eth_env_set_enetaddr(ethaddr, mac_addr);
+		}
+	}
+
+	/* Always overwrite serial and fdtfile */
+	sprintf(cmd,"env set -f serial# %08x", eeprom->serial);
+	run_command(cmd, 0);
+
+	env_set("fdtfile", getek_get_board_fdt());
+
+}
+
+static __maybe_unused int getek_parse_mmc_boot_sector(void)
+{
+	struct mmc *mmc = NULL;
+	uint8_t header[512];
+	uint32_t count;
+	int ret;
+
+	mmc = find_mmc_device(1);
+	if (!mmc)
+		return -ENODEV;
+
+	ret = mmc_init(mmc);
+	if (ret)
+		return ret;
+
+	count = blk_dread(mmc_get_blk_desc(mmc), 16, 1, header);
+	if (!count)
+		return -EIO;
+
+	return (memcmp((void *)&header[4], BOOT0_MAGIC, 8) == 0);
+}
+
+int misc_init_r(void)
+{
+	__maybe_unused struct udevice *dev;
+	uint boot;
+	int ret;
+
+	env_set("fel_booted", NULL);
+	env_set("fel_scriptaddr", NULL);
+	env_set("mmc_bootdev", NULL);
+
+	boot = sunxi_get_boot_device();
+	/* determine if we are running in FEL mode */
+	if (boot == BOOT_DEVICE_BOARD) {
+		env_set("fel_booted", "1");
+		parse_spl_header(SPL_ADDR);
+	/* or if we booted from MMC, and which one */
+	} else if (boot == BOOT_DEVICE_MMC1) {
+		env_set("mmc_bootdev", "0");
+	} else if (boot == BOOT_DEVICE_MMC2) {
+		env_set("mmc_bootdev", "1");
+	} else if (boot == BOOT_DEVICE_SPI) {
+
+		env_set("spi_booted", "1");
+
+		/**
+		 * When booting from SPI always set mmc_bootdev
+		 * to the eMMC
+		 */
+		if (eeprom->config.storage == 'e')
+ 			env_set("mmc_bootdev", "1");
+		else
+			env_set("mmc_bootdev", "0");
+	}
+
+	/* Setup environment */
+	setup_environment(gd->fdt_blob);
+
+#ifdef CONFIG_USB_MUSB_GADGET
+	ret = uclass_first_device(UCLASS_USB_GADGET_GENERIC, &dev);
+	if (!dev || ret) {
+		printf("No USB device found\n");
+		return 0;
+	}
+
+	ret = device_probe(dev);
+	if (ret) {
+		printf("Failed to probe USB device\n");
+		return 0;
+	}
+#endif
+	return 0;
+}
+
+int ft_board_setup(void *blob, bd_t *bd)
+{
+	int __maybe_unused r;
+
+	/*
+	 * Call setup_environment again in case the boot fdt has
+	 * ethernet aliases the u-boot copy does not have.
+	 */
+	setup_environment(blob);
+
+#ifdef CONFIG_VIDEO_DT_SIMPLEFB
+	r = sunxi_simplefb_setup(blob);
+	if (r)
+		return r;
+#endif
+	return 0;
+}
+
+
+int show_board_info(void)
+{
+	const char *name;
+	char *mac = eeprom->mac;
+	uint8_t i;
+
+	if (!getek_eeprom_is_valid()) {
+		printf("Model: Unknown\n");
+		return 0;
+	}
+
+	/**
+	 * In case of lowercase revision number, rewrite eeprom
+	 */
+	if (eeprom->revision.major >= 'a' && eeprom->revision.major <= 'z') {
+		eeprom->revision.major -= 0x20;
+
+		getek_i2c_eeprom_write();
+	}
+
+	/* Get board name and compare if with eeprom content */
+	name = getek_get_board_name();
+
+	printf("Model: %s Rev.%c%c", name,
+	       (eeprom->revision.major < 'A' || eeprom->revision.major > 'Z') ?
+	       0 : eeprom->revision.major,
+	       (eeprom->revision.minor < '1' || eeprom->revision.minor > '9') ?
+	       0 : eeprom->revision.minor);
+
+	printf("\nSerial:%08X\n", eeprom->serial);
+	printf("MAC:   ");
+	for (i = 0; i < 12; i += 2 ) {
+		if (i < 10)
+			printf("%c%c:",
+				(mac[i] == 0xFF) ? 'F' : mac[i],
+				(mac[i+1] == 0xFF) ? 'F' : mac[i+1]);
+		else
+			printf("%c%c\n",
+				(mac[i] == 0xFF) ? 'F' : mac[i],
+				(mac[i+1] == 0xFF) ? 'F' : mac[i+1]);
+	}
+
+	return 0;
+}
+
+#ifdef CONFIG_MULTI_DTB_FIT
+int board_fit_config_name_match(const char *name)
+{
+	const char *dtb;
+
+	if (!getek_eeprom_is_valid())
+		return -1;
+
+	dtb = getek_get_board_fdt();
+	return (!strncmp(name, dtb, strlen(dtb) - 4)) ? 0 : -1;
+}
+#endif /* CONFIG_MULTI_DTB_FIT */
+
+#ifdef CONFIG_SET_DFU_ALT_INFO
+void set_dfu_alt_info(char *interface, char *devstr)
+{
+	char *p = NULL;
+	int dev;
+
+	printf("interface: %s, devstr: %s\n", interface, devstr);
+
+#ifdef CONFIG_DFU_MMC
+	if (!strcmp(interface, "mmc")) {
+		dev = simple_strtoul(devstr, NULL, 10);
+		if (dev == 0 )
+			p = env_get("dfu_alt_info_mmc0");
+		else if (dev == 1)
+			p = env_get("dfu_alt_info_mmc1");
+	}
+#endif
+
+#ifdef CONFIG_DFU_RAM
+	if (!strcmp(interface, "ram"))
+		p = env_get("dfu_alt_info_ram");
+#endif
+
+#ifdef CONFIG_DFU_NAND
+	if (!strcmp(interface, "nand"))
+		p = env_get("dfu_alt_info_nand");
+#endif
+
+#ifdef CONFIG_DFU_SF
+	if (!strcmp(interface, "sf"))
+		p = env_get("dfu_alt_info_sf");
+#endif
+	env_set("dfu_alt_info", p);
+}
+
+#endif /* CONFIG_SET_DFU_ALT_INFO */
+
+#endif /* !CONFIG_SPL_BUILD */
diff --git a/board/getek/getek_som204_a20/fdt.c b/board/getek/getek_som204_a20/fdt.c
new file mode 100644
index 0000000..a461334
--- /dev/null
+++ b/board/getek/getek_som204_a20/fdt.c
@@ -0,0 +1,1081 @@
+#include <common.h>
+#include <fdt_support.h>
+#include <malloc.h>
+#include <mtd_node.h>
+#include <asm/arch/gpio.h>
+#include <jffs2/load_kernel.h>
+#include <linux/libfdt.h>
+#include <linux/sizes.h>
+
+#include "../common/lcd_getek.h"
+#include "../common/board_detect.h"
+#include "../common/boards.h"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+static int board_fix_model(void *blob)
+{
+	int offset;
+	int ret;
+	char temp[10];
+
+	offset = fdt_path_offset(blob, "/");
+	if (offset < 0)
+		return offset;
+
+	/**
+	 * / {
+	 * 	model = <name>;
+	 *	id = <id>;
+	 *	revision = <revision>;
+	 */
+	sprintf(temp, "%c%c", eeprom->revision.major, eeprom->revision.minor);
+	ret = fdt_setprop_string(blob, offset, "revision", (const char *)temp);
+	sprintf(temp, "%d", eeprom->id);
+	ret |= fdt_setprop_string(blob, offset, "id",(const char *)temp);
+	ret |= fdt_setprop_string(blob, offset, "model", getek_get_board_name());
+
+	return ret;
+
+}
+
+static int board_fix_atecc508a(void *blob)
+{
+	int offset;
+	int ret;
+
+	/**
+	 * Enabled on:
+	 *   - A20-SOM204-1Gs16Me16G-MC (8958)
+	 *   - T2-SOM204-1Gs16Me4G-C-I (10157)
+	 *   - T2-SOM204-1Gs16Me8G-MC-I (10234)
+	 */
+	if (eeprom->id != 8958 && eeprom->id != 10157 && eeprom->id != 10234)
+		return 0;
+
+	/**
+	 * Add the following node:
+	 * &i2c {
+	 *     atecc508a@60 {
+	 *         compatible = "atmel,atecc508a";
+	 *         reg = <0x60>;
+	 * };
+	 */
+	offset = fdt_path_offset(blob, "/soc/i2c@1c2b400");
+ 	if (offset < 0)
+ 		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "atecc508a@60");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_u32(blob, offset, "reg", 0x60);
+	ret |= fdt_setprop_string(blob, offset, "compatible", "atmel,atecc508a");
+
+	return ret;
+}
+
+static int board_fix_spi_flash(void *blob)
+{
+	uint32_t phandle;
+	int offset, ret = 0;
+
+	/**
+	 * Some boards, have both eMMC and SPI flash
+	 */
+	if (!getek_board_has_spi())
+		return 0;
+
+	/*
+	 * Find /soc@01c00000/pinctrl@01c20800
+	 * Add following properties:
+	 *     spi0-pc-pins {
+	 *         pins = "PC0", "PC1", "PC2", "PC23";
+	 *         function = "spi0";
+	 *     };
+	 *
+	 * Test:
+	 * fdt print /soc@01c00000/pinctrl@01c20800/spi0@1
+	 */
+
+	offset = fdt_path_offset(blob, "/soc/pinctrl@1c20800");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "spi0-pc-pins");
+	if (offset < 0)
+		return offset;
+
+	/* Generate phandle */
+	phandle = fdt_create_phandle(blob, offset);
+	if (!phandle)
+		return -1;
+
+	ret |= fdt_setprop_string(blob, offset, "function" , "spi0");
+	ret |= fdt_setprop_string(blob, offset, "pins" , "PC0");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC1");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC2");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC23");
+	if (ret < 0)
+		return ret;
+
+	/**
+	 * Find /soc@01c00000/spi@01c05000
+	 *
+	 * Change following properties:
+	 *   - pinctrl-names = "default";
+	 *   - pinctrl-0 = <&spi0@1>;
+	 *   - spi-max-frequency = <20000000>;
+	 *   - status = "okay";
+	 *
+	 * Test:
+	 * fdt print /soc@01c00000/spi@01c05000
+	 */
+	offset = fdt_path_offset(blob, "/soc/spi@1c05000");
+ 	if (offset < 0)
+ 		return offset;
+
+	/* Change status to okay */
+	ret |= fdt_set_node_status(blob, offset, FDT_STATUS_OKAY, 0);
+	ret |= fdt_setprop_u32(blob, offset, "spi-max-frequency", 20000000);
+	ret |= fdt_setprop_u32(blob, offset, "pinctrl-0", phandle);
+	ret |= fdt_setprop_string(blob, offset, "pinctrl-names", "default");
+	if (ret < 0)
+		return ret;
+
+	/**
+	 * Add the following node:
+	 * spi-nor@0 {
+	 *     #address-cells = <1>;
+	 *     #size-cells = <1>;
+	 *     compatible = "winbond,w25q128", "jedec,spi-nor", "spi-flash";
+	 *     reg = <0>;
+	 *     spi-max-frequency = <20000000>;
+	 *     status = "okay";
+	 * }
+	 */
+	offset = fdt_add_subnode(blob, offset, "spi-nor@0");
+	if (offset < 0)
+		return offset;
+
+	ret |= fdt_set_node_status(blob, offset, FDT_STATUS_OKAY, 0);
+	ret |= fdt_setprop_u32(blob, offset, "spi-max-frequency", 20000000);
+	ret |= fdt_setprop_u32(blob, offset, "reg", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 1);
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	ret |= fdt_setprop_string(blob, offset, "compatible", "winbond,w25q128");
+	ret |= fdt_appendprop_string(blob, offset, "compatible", "jedec,spi-nor");
+	ret |= fdt_appendprop_string(blob, offset, "compatible", "spi-flash");
+	if (ret < 0)
+		return ret;
+
+	/* Aliases should be modified only before relocation */
+	if (!gd->flags & GD_FLG_RELOC)
+		return 0;
+	/*
+	 * Add alias property
+	 *
+	 * fdt print /aliases
+	 *     spi0 = "/soc@01c00000/spi@01c05000"
+	 */
+	offset = fdt_path_offset(blob, "/aliases");
+	if (offset < 0)
+		return offset;
+
+	return fdt_setprop_string(blob, offset, "spi0", "/soc/spi@1c05000");
+}
+
+static int board_fix_nand(void *blob)
+{
+	int offset;
+	uint32_t phandle;
+	int ret = 0;
+
+	/* Modify only boards with nand storage */
+	if (eeprom->config.storage != 'n')
+		return 0;
+
+	/*
+	 * Find /soc@01c00000/pinctrl@01c20800
+	 * Add following properties:
+	 *     nand0@0 {
+	 *         pins = "PC0", "PC1", "PC2", PC4, "PC5", PC6, "PC8",
+	 *		"PC9", "PC10", "PC11", "PC12", "PC13",
+	 *		"PC14", "PC15", "PC16";
+	 *         function = "nand0";
+	 *     };
+	 *
+	 * Test:
+	 * fdt print /soc@01c00000/pinctrl@01c20800/nand0@0
+	 */
+
+	offset = fdt_path_offset(blob, "/soc/pinctrl@1c20800");
+	if (offset < 0)
+		return offset;
+
+ 	offset = fdt_add_subnode(blob, offset, "nand-pins");
+ 	if (offset < 0)
+ 		return offset;
+
+	phandle = fdt_create_phandle(blob, offset);
+	if (!phandle)
+		return -1;
+
+ 	ret |= fdt_setprop_string(blob, offset, "function" , "nand0");
+
+ 	ret |= fdt_setprop_string(blob, offset, "pins" , "PC0");
+ 	ret |= fdt_appendprop_string(blob, offset, "pins", "PC1");
+ 	ret |= fdt_appendprop_string(blob, offset, "pins", "PC2");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC4");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC5");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC6");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC8");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC9");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC10");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC11");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC12");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC13");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC14");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC15");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PC16");
+ 	if (ret < 0)
+ 		return ret;
+
+	/**
+	 * Find /soc@01c00000/nand@01c03000
+	 *
+	 * Change following properties:
+	 *   - pinctrl-names = "default";
+	 *   - pinctrl-0 = <&nand0@0>;
+	 *   - #address-cells = <1>;
+	 *   - #size-cells = <0>;
+	 *   - status = "okay";
+	 *
+	 * Test:
+	 * fdt print /soc@01c00000/nand@01c03000
+	 */
+
+	/* TODO: Make this universal */
+	if (!(gd->flags & GD_FLG_RELOC))
+		offset = fdt_path_offset(blob, "/soc/nand@1c03000");
+	else
+		offset = fdt_path_offset(blob, "/soc/nand-controller@1c03000");
+	if (offset < 0)
+		return offset;
+
+	/* Change status to okay */
+	ret |= fdt_set_node_status(blob, offset, FDT_STATUS_OKAY, 0);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	ret |= fdt_setprop_u32(blob, offset, "pinctrl-0", phandle);
+	ret |= fdt_setprop_string(blob, offset, "pinctrl-names", "default");
+	if (ret < 0)
+		return ret;
+
+	/**
+	 * Add the following node:
+	 * nand@0 {
+	 *     reg = <0>;
+	 *     allwinner,rb = <0>;
+	 *     nand-ecc-mode = "hw";
+	 *     nand-on-flash-bbt;
+	 *    }
+	 */
+	offset = fdt_add_subnode(blob, offset, "nand@0");
+	if (offset < 0)
+		return offset;
+
+	ret |= fdt_setprop_empty(blob, offset, "nand-on-flash-bbt");
+	ret |= fdt_setprop_string(blob, offset, "nand-ecc-mode", "hw");
+	ret |= fdt_setprop_u32(blob, offset, "allwinner,rb", 0);
+	ret |= fdt_setprop_u32(blob, offset, "reg", 0);
+	if (ret < 0)
+		return ret;
+
+	offset = fdt_add_subnode(blob, offset, "partitions");
+	if (offset < 0)
+		return offset;
+
+	ret |= fdt_setprop_string(blob, offset, "compatible" , "fixed-partitions");
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 2);
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 2);
+	return ret;
+}
+
+static int (*getek_fixes[]) (void *blob) = {
+	board_fix_model,
+	board_fix_spi_flash,
+	board_fix_atecc508a,
+	board_fix_nand,
+};
+
+int getek_fdt_fixup(void *blob)
+{
+	uint8_t i;
+	int ret;
+
+	ret = fdt_increase_size(blob, 65535);
+	if (ret < 0)
+		return ret;
+
+	/* Apply fixes */
+	for (i = 0; i < ARRAY_SIZE(getek_fixes); i++) {
+		ret = getek_fixes[i](blob);
+		if (ret < 0)
+			return ret;
+	}
+
+	return 0;
+}
+
+#ifdef CONFIG_VIDEO_LCD_PANEL_GETEK
+static int board_fix_lcd_getek_lvds(void *blob)
+{
+	struct lcd_getek_board *lcd = lcd_getek_get_data();
+
+	uint32_t backlight_phandle;
+	uint32_t ccu_phandle;
+	uint32_t panel_endpoint_phandle;
+	uint32_t pinctrl_phandle;
+	uint32_t pins_phandle[2] = {};
+	uint32_t power_supply_phandle;
+	uint32_t pwm_phandle;
+	uint32_t tcon0_endpoint_phandle;
+
+	fdt32_t ccu[2];
+	fdt32_t gpios[4];
+	fdt32_t levels[11];
+	fdt32_t phandles[2];
+
+	int gpio;
+	int i;
+	int offset;
+	int ret = 0;
+
+	offset = fdt_path_offset(blob, "/soc/pinctrl@1c20800");
+	if (offset < 0)
+		return offset;
+
+	pinctrl_phandle = fdt_get_phandle(blob, offset);
+	if (pinctrl_phandle < 0)
+		return pinctrl_phandle;
+
+	offset = fdt_path_offset(blob, "/soc/clock@1c20000");
+	if (offset < 0)
+		return offset;
+
+	ccu_phandle = fdt_get_phandle(blob, offset);
+	if (ccu_phandle < 0)
+		return ccu_phandle;
+
+
+	offset = fdt_path_offset(blob, "/vcc5v0");
+	if (offset < 0)
+		return offset;
+
+	power_supply_phandle = fdt_get_phandle(blob, offset);
+	if (power_supply_phandle < 0)
+		return power_supply_phandle;
+
+	/**
+	 * &pwm {
+	 * 	pinctrl-names = "default";
+	 *	pinctrl-0 = <&pwm0_pins_a>;
+	 *	status = "okay";
+	 * };
+	 */
+
+	offset = fdt_path_offset(blob, "/soc/pinctrl@1c20800");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "pwm0-pin");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_string(blob, offset, "function" , "pwm");
+	ret |= fdt_setprop_string(blob, offset, "pins" , "PB2");
+	if (ret < 0)
+		return ret;
+
+	pins_phandle[0] = fdt_create_phandle(blob, offset);
+	if (!pins_phandle[0])
+		return -1;
+
+	offset = fdt_path_offset(blob, "/soc/pwm@1c20e00");
+	if (offset < 0)
+		return offset;
+
+	ret |= fdt_set_node_status(blob, offset, FDT_STATUS_OKAY, 0);
+	ret |= fdt_setprop_u32(blob, offset, "pinctrl-0", pins_phandle[0]);
+	ret |= fdt_setprop_string(blob, offset, "pinctrl-names", "default");
+	if (ret < 0)
+		return ret;
+
+	pwm_phandle = fdt_create_phandle(blob, offset);
+	if (!pwm_phandle)
+		return -1;
+
+	/**
+	 * backlight: backlight {
+	 * 	compatible = "pwm-backlight";
+	 * 	power-supply = <&reg_vcc5v0>;
+	 * 	pwms = <&pwm 0 50000 0>;
+	 * 	brightness-levels = <0 10 20 30 40 50 60 70 80 90 100>;
+	 *	default-brightness-level = <10>;
+	 * };
+	 */
+
+	offset = fdt_path_offset(blob, "/");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "backlight");
+	if (offset < 0)
+		return offset;
+
+	gpios[0] = cpu_to_fdt32(pwm_phandle);
+	gpios[1] = cpu_to_fdt32(0);
+	gpios[2] = cpu_to_fdt32(50000);
+	gpios[3] = cpu_to_fdt32(0);
+	ret = fdt_setprop(blob, offset, "pwms", gpios, sizeof(gpios));
+
+	for (i = 0; i < 11; i++)
+		levels[i] = cpu_to_fdt32(i * 10);
+	ret |= fdt_setprop(blob, offset, "brightness-levels", levels, sizeof(levels));
+	ret |= fdt_setprop_u32(blob, offset, "default-brightness-level", 10);
+	ret |= fdt_setprop_u32(blob, offset, "power-supply", power_supply_phandle);
+	ret |= fdt_setprop_string(blob, offset, "compatible", "pwm-backlight");
+	if (ret < 0)
+		return ret;
+
+	backlight_phandle = fdt_create_phandle(blob, offset);
+	if (!backlight_phandle)
+		return -1;
+
+
+	/**
+	 * lcd0_lvds0_pins: lcd0_lvds0_pins@0 {
+	 * 	pins = "PD0", "PD1", "PD2", "PD3", "PD4", "PD5",
+	 * 		"PD6", "PD7", "PD8", "PD9";
+	 * 	function = "lvds0";
+	 * };
+	 *
+	 * lcd0_lvds1_pins: lcd0_lvds1_pins@0 {
+	 * 	pins = "PD10", "PD11", "PD12", "PD13", "PD14", "PD15",
+	 * 		"PD16", "PD17", "PD18", "PD19";
+	 * 	function = "lvds1";
+	 * };
+	 */
+
+	offset = fdt_path_offset(blob, "/soc/pinctrl@1c20800");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "lcd0_lvds0_pins");
+	if (offset < 0)
+		return offset;
+
+	pins_phandle[0] = fdt_create_phandle(blob, offset);
+	if (!pins_phandle[0])
+		return -1;
+
+	ret = fdt_setprop_string(blob, offset, "function" , "lvds0");
+	ret |= fdt_setprop_string(blob, offset, "pins" , "PD0");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD1");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD2");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD4");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD5");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD6");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD7");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD8");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD9");
+	if (ret < 0)
+		return ret;
+
+	offset = fdt_path_offset(blob, "/soc/pinctrl@1c20800");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "lcd0_lvds1_pins");
+	if (offset < 0)
+		return offset;
+
+	pins_phandle[1] = fdt_create_phandle(blob, offset);
+	if (!pins_phandle[1])
+		return -1;
+
+	ret = fdt_setprop_string(blob, offset, "function" , "lvds1");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD10");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD11");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD12");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD13");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD14");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD15");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD16");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD17");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD18");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD19");
+	if (ret < 0)
+		return ret;
+
+
+	/**
+	 * panel {
+	 * 	compatible = "panel-lvds";
+	 *
+	 * 	width-mm = <344>;
+	 *	height-mm = <193>;
+	 *	data-mapping = "jeida-18";
+	 *
+	 * 	#address-cells = <1>;
+	 * 	#size-cells = <0>;
+	 * 	reg = <0x50>;
+	 *
+	 * 	pinctrl-names = "default";
+	 * 	pinctrl-0 = <&lcd0_lvds1_pins &lcd0_lvds0_pins>;
+	 *
+	 * 	power-supply = <&reg_vcc5v0>;
+	 *
+	 *	enable-gpios = <&pio 7 8 GPIO_ACTIVE_HIGH>;
+	 * 	backlight = <&backlight>;
+	 * 	status = "okay";
+	 *	panel-timing {
+	 * 		clock-frequency = <71000000>;
+	 * 		hactive = <1280>;
+	 * 		vactive = <800>;
+	 * 		hsync-len = <70>;
+	 * 		hfront-porch = <20>;
+	 * 		hback-porch = <70>;
+	 * 		vsync-len = <5>;
+	 * 		vfront-porch = <3>;
+	 * 		vback-porch = <15>;
+	 *	};
+	 *
+	 * 	port@0 {
+	 * 		#address-cells = <1>;
+	 * 		#size-cells = <0>;
+	 * 		reg = <0>;
+	 *
+	 * 		panel_in_tcon0: endpoint@0 {
+	 * 			#address-cells = <1>;
+	 * 			#size-cells = <0>;
+	 * 			reg = <0>;
+	 * 			remote-endpoint = <&tcon0_out_panel>;
+	 * 			};
+	 *		};
+	 *	};
+	 * };
+	 */
+
+	offset = fdt_path_offset(blob, "/");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "panel");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_string(blob, offset, "compatible", "panel-lvds");
+
+	ret |= fdt_setprop_u32(blob, offset, "width-mm", 362);
+	ret |= fdt_setprop_u32(blob, offset, "height-mm", 193);
+	ret |= fdt_setprop_string(blob, offset, "data-mapping", "jeida-18");
+
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 0);
+	ret |= fdt_setprop_string(blob, offset, "pinctrl-names", "default");
+	phandles[0] = cpu_to_fdt32(pins_phandle[0]);
+	phandles[1] = cpu_to_fdt32(pins_phandle[1]);
+	ret |= fdt_setprop(blob, offset, "pinctrl-0", phandles, sizeof(phandles));
+
+	ret |= fdt_setprop_u32(blob, offset, "power-supply", power_supply_phandle);
+	ret |= fdt_setprop_u32(blob, offset, "backlight", backlight_phandle);
+
+	gpios[0] = cpu_to_fdt32(pinctrl_phandle);
+	gpio = sunxi_name_to_gpio(getek_get_lcd_pwr_pin());
+	gpios[1] = cpu_to_fdt32(gpio >> 5);
+	gpios[2] = cpu_to_fdt32(gpio & 0x1F);
+	gpios[3] = cpu_to_fdt32(0);
+	ret |= fdt_setprop(blob, offset, "enable-gpios", gpios, sizeof(gpios));
+	ret |= fdt_set_node_status(blob, offset, FDT_STATUS_OKAY, 0);
+	if (ret < 0)
+		return ret;
+
+
+	offset = fdt_add_subnode(blob, offset, "panel-timing");
+
+	ret = fdt_setprop_u32(blob, offset, "clock-frequency", lcd->mode.pixelclock * 1000);
+	ret |= fdt_setprop_u32(blob, offset, "hactive", lcd->mode.hactive);
+	ret |= fdt_setprop_u32(blob, offset, "vactive", lcd->mode.vactive);
+	ret |= fdt_setprop_u32(blob, offset, "hsync-len", lcd->mode.hpw);
+	ret |= fdt_setprop_u32(blob, offset, "hfront-porch", lcd->mode.hfp);
+	ret |= fdt_setprop_u32(blob, offset, "hback-porch", lcd->mode.hbp);
+	ret |= fdt_setprop_u32(blob, offset, "vsync-len", lcd->mode.vpw);
+	ret |= fdt_setprop_u32(blob, offset, "vfront-porch", lcd->mode.vfp);
+	ret |= fdt_setprop_u32(blob, offset, "vback-porch", lcd->mode.vbp);
+	if (lcd->id == 7894) {
+		ret |= fdt_setprop_u32(blob, offset, "hsync-active", 1);
+		ret |= fdt_setprop_u32(blob, offset, "vsync-active", 1);
+	}
+	if (ret < 0)
+		return ret;
+
+	offset = fdt_path_offset(blob, "/panel");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "port@0");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_u32(blob, offset, "reg", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	if (ret < 0)
+		return ret;
+
+	offset = fdt_add_subnode(blob, offset, "endpoint@0");
+	if (offset < 0)
+		return offset;
+	ret = fdt_setprop_u32(blob, offset, "reg", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	if (ret < 0)
+		return ret;
+
+	panel_endpoint_phandle = fdt_create_phandle(blob, offset);
+	if (!panel_endpoint_phandle)
+		return -1;
+
+	/**
+	* &tcon0_out {
+	* 	#address-cells = <1>;
+	* 	#size-cells = <0>;
+	*
+	* 	tcon0_out_panel: endpoint@0 {
+	* 		#address-cells = <1>;
+	* 		#size-cells = <0>;
+	* 		reg = <0>;
+	* 		remote-endpoint = <&panel_in_tcon0>;
+	* 	};
+	* };
+	*/
+
+	offset = fdt_path_offset(blob, "/soc/lcd-controller@1c0c000");
+	if (offset < 0)
+		return offset;
+
+	ccu[0] = cpu_to_fdt32(ccu_phandle);
+	ccu[1] = cpu_to_fdt32(18);
+	ret |= fdt_appendprop(blob, offset, "resets", ccu, sizeof(ccu));
+	ret |= fdt_appendprop_string(blob, offset, "reset-names", "lvds");
+	if (ret)
+		return ret;
+
+	offset = fdt_subnode_offset(blob, offset, "ports");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_subnode_offset(blob, offset, "port@1");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "endpoint@0");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_u32(blob, offset, "remote-endpoint", panel_endpoint_phandle);
+	ret |= fdt_setprop_u32(blob, offset, "reg", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	if (lcd->id == 7894)
+		ret |= fdt_setprop_empty(blob, offset, "allwinner,lvds-dual-link");
+	if (ret < 0)
+		return ret;
+
+	tcon0_endpoint_phandle  = fdt_create_phandle(blob, offset);
+	if (!tcon0_endpoint_phandle)
+		return -1;
+
+	offset = fdt_path_offset(blob, "/panel/port@0/endpoint@0");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_u32(blob, offset, "remote-endpoint", tcon0_endpoint_phandle);
+	if (ret < 0)
+		return ret;
+
+	return ret;
+
+}
+
+static int board_fix_lcd_getek_rgb(void *blob)
+{
+	struct lcd_getek_board *lcd = lcd_getek_get_data();
+
+	uint32_t backlight_phandle;
+	uint32_t panel_endpoint_phandle;
+	uint32_t pinctrl_phandle;
+	uint32_t pins_phandle;
+	uint32_t pwm_phandle;
+	uint32_t tcon0_endpoint_phandle;
+
+	fdt32_t gpios[4];
+	fdt32_t irq[3];
+	fdt32_t levels[11];
+
+	int gpio;
+	int i;
+	int offset;
+	int ret = 0;
+
+	offset = fdt_path_offset(blob, "/soc/pinctrl@1c20800");
+	if (offset < 0)
+		return offset;
+
+	pinctrl_phandle = fdt_get_phandle(blob, offset);
+	if (pinctrl_phandle < 0)
+		return pinctrl_phandle;
+
+	/**
+	 * &pwm {
+	 * 	pinctrl-names = "default";
+	 *	pinctrl-0 = <&pwm0_pins_a>;
+	 *	status = "okay";
+	 * };
+	 */
+
+	offset = fdt_path_offset(blob, "/soc/pinctrl@1c20800");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "pwm0-pin");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_string(blob, offset, "function" , "pwm");
+	ret |= fdt_setprop_string(blob, offset, "pins" , "PB2");
+	if (ret < 0)
+		return ret;
+
+	pins_phandle = fdt_create_phandle(blob, offset);
+	if (!pins_phandle)
+		return -1;
+
+	offset = fdt_path_offset(blob, "/soc/pwm@1c20e00");
+	if (offset < 0)
+		return offset;
+
+	ret |= fdt_set_node_status(blob, offset, FDT_STATUS_OKAY, 0);
+	ret |= fdt_setprop_u32(blob, offset, "pinctrl-0", pins_phandle);
+	ret |= fdt_setprop_string(blob, offset, "pinctrl-names", "default");
+	if (ret < 0)
+		return ret;
+
+	pwm_phandle = fdt_create_phandle(blob, offset);
+	if (!pwm_phandle)
+		return -1;
+
+	/**
+	 * backlight: backlight {
+	 * 	compatible = "pwm-backlight";
+	 * 	power-supply = <&reg_vcc5v0>;
+	 * 	pwms = <&pwm 0 50000 1>;
+	 * 	brightness-levels = <0 10 20 30 40 50 60 70 80 90 100>;
+	 *	default-brightness-level = <10>;
+	 * };
+	 */
+
+	offset = fdt_path_offset(blob, "/");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "backlight");
+	if (offset < 0)
+		return offset;
+
+	gpios[0] = cpu_to_fdt32(pwm_phandle);
+	gpios[1] = cpu_to_fdt32(0);
+	gpios[2] = cpu_to_fdt32(50000);
+	gpios[3] = cpu_to_fdt32(1);
+	ret = fdt_setprop(blob, offset, "pwms", gpios, sizeof(gpios));
+
+	for (i = 0; i < 11; i++)
+		levels[i] = cpu_to_fdt32(i * 10);
+	ret |= fdt_setprop(blob, offset, "brightness-levels", levels, sizeof(levels));
+	ret |= fdt_setprop_u32(blob, offset, "default-brightness-level", 10);
+	ret |= fdt_setprop_string(blob, offset, "compatible", "pwm-backlight");
+	if (ret < 0)
+		return ret;
+
+	backlight_phandle = fdt_create_phandle(blob, offset);
+	if (!backlight_phandle)
+		return -1;
+
+	/**
+	 * lcd0_rgb888_pins: lcd0_rgb888_pins@0 {
+	 * 	pins = "PD0", "PD1", "PD2", "PD3", "PD4", "PD5",
+	 * 		"PD6", "PD7", "PD8", "PD9", "PD10",
+	 * 		"PD11", "PD12", "PD13", "PD14", "PD15",
+	 * 		"PD16", "PD17", "PD18", "PD19", "PD20",
+	 * 		"PD21", "PD22", "PD23", "PD24", "PD25",
+	 * 		"PD26", "PD27";
+	 * 	function = "lcd0";
+	 * };
+	 */
+
+	offset = fdt_path_offset(blob, "/soc/pinctrl@1c20800");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "lcd0_rgb888_pins");
+	if (offset < 0)
+		return offset;
+
+	pins_phandle = fdt_create_phandle(blob, offset);
+	if (!pins_phandle)
+		return -1;
+
+	ret = fdt_setprop_string(blob, offset, "function" , "lcd0");
+
+	ret |= fdt_setprop_string(blob, offset, "pins" , "PD0");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD1");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD2");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD3");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD4");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD5");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD6");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD7");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD8");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD9");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD10");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD11");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD12");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD13");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD14");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD15");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD16");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD17");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD18");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD19");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD20");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD21");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD22");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD23");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD24");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD25");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD26");
+	ret |= fdt_appendprop_string(blob, offset, "pins", "PD27");
+	if (ret < 0)
+		return ret;
+
+	/**
+	 * lcd-panel {
+	 * 	compatible = "getek,lcd-getek";
+	 * 	#address-cells = <1>;
+	 * 	#size-cells = <0>;
+	 *
+	 * 	pinctrl-names = "default";
+	 * 	pinctrl-0 = <&lcd0_rgb888_pins>;
+	 *
+	 * 	power-supply = <&reg_vcc5v0>;
+	 *
+	 *	enable-gpios = <&pio 7 8 GPIO_ACTIVE_HIGH>;
+	 * 	backlight = <&backlight>;
+	 * 	status = "okay";
+	 *
+	 * 	port@0 {
+	 * 		#address-cells = <1>;
+	 * 		#size-cells = <0>;
+	 * 		reg = <0>;
+	 *
+	 * 		panel_in_tcon0: endpoint@0 {
+	 * 			#address-cells = <1>;
+	 * 			#size-cells = <0>;
+	 * 			reg = <0>;
+	 * 			remote-endpoint = <&tcon0_out_panel>;
+	 * 			};
+	 *		};
+	 *	};
+	 * };
+	 */
+
+	if (!lcd) {
+		offset = fdt_path_offset(blob, "/soc/i2c@1c2b400");
+		if (offset < 0)
+			return offset;
+
+		offset = fdt_add_subnode(blob, offset, "panel@50");
+		if (offset < 0)
+			return offset;
+	} else {
+		offset = fdt_path_offset(blob, "/");
+		if (offset < 0)
+			return offset;
+
+		offset = fdt_add_subnode(blob, offset, "panel");
+		if (offset < 0)
+			return offset;
+	}
+
+	ret = fdt_setprop_string(blob, offset, "compatible", lcd_getek_compatible());
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 0);
+	if (!lcd)
+		ret |= fdt_setprop_u32(blob, offset, "reg", 0x50);
+	ret |= fdt_setprop_string(blob, offset, "pinctrl-names", "default");
+	ret |= fdt_setprop_u32(blob, offset, "pinctrl-0", pins_phandle);
+	ret |= fdt_setprop_u32(blob, offset, "backlight", backlight_phandle);
+
+	gpios[0] = cpu_to_fdt32(pinctrl_phandle);
+	gpio = sunxi_name_to_gpio(getek_get_lcd_pwr_pin());
+	gpios[1] = cpu_to_fdt32(gpio >> 5);
+	gpios[2] = cpu_to_fdt32(gpio & 0x1F);
+	gpios[3] = cpu_to_fdt32(0);
+	ret |= fdt_setprop(blob, offset, "enable-gpios", gpios, sizeof(gpios));
+	ret |= fdt_set_node_status(blob, offset, FDT_STATUS_OKAY, 0);
+	if (ret < 0)
+		return ret;
+
+	offset = fdt_add_subnode(blob, offset, "port@0");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_u32(blob, offset, "reg", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	if (ret < 0)
+		return ret;
+
+	offset = fdt_add_subnode(blob, offset, "endpoint@0");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_u32(blob, offset, "reg", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	if (ret < 0)
+		return ret;
+
+	panel_endpoint_phandle = fdt_create_phandle(blob, offset);
+	if (!panel_endpoint_phandle)
+		return -1;
+
+	/**
+	* &tcon0_out {
+	* 	#address-cells = <1>;
+	* 	#size-cells = <0>;
+	*
+	* 	tcon0_out_panel: endpoint@0 {
+	* 		#address-cells = <1>;
+	* 		#size-cells = <0>;
+	* 		reg = <0>;
+	* 		remote-endpoint = <&panel_in_tcon0>;
+	* 	};
+	* };
+	*/
+
+	offset = fdt_path_offset(blob, "/soc/lcd-controller@1c0c000/ports/port@1");
+	if (offset < 0)
+		return offset;
+
+	offset = fdt_add_subnode(blob, offset, "endpoint@0");
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_u32(blob, offset, "remote-endpoint", panel_endpoint_phandle);
+	ret |= fdt_setprop_u32(blob, offset, "reg", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#size-cells", 0);
+	ret |= fdt_setprop_u32(blob, offset, "#address-cells", 1);
+	if (lcd) {
+		if (lcd->id == LCD_GETEK_SATOZ_SAT043AT40D09RH)
+			ret = fdt_setprop_empty(blob, offset, "allwinner,force-dithering");
+	}
+	if (ret < 0)
+		return ret;
+
+	tcon0_endpoint_phandle  = fdt_create_phandle(blob, offset);
+	if (!tcon0_endpoint_phandle)
+		return -1;
+
+	if (!lcd)
+		offset = fdt_path_offset(blob, "/soc/i2c@1c2b400/panel@50/port@0/endpoint@0");
+	else
+		offset = fdt_path_offset(blob, "/panel/port@0/endpoint@0");
+
+	if (offset < 0)
+		return offset;
+
+	ret = fdt_setprop_u32(blob, offset, "remote-endpoint", tcon0_endpoint_phandle);
+	if (ret < 0)
+		return ret;
+
+	return ret;
+}
+#endif
+
+#if defined(CONFIG_OF_BOARD_FIXUP)
+int board_fix_fdt(void *blob)
+{
+	return getek_fdt_fixup(blob);
+}
+#endif
+
+#if defined(CONFIG_OF_SYSTEM_SETUP)
+int ft_system_setup(void *blob, bd_t *bd)
+{
+	size_t blob_size = gd->fdt_size;
+	void *recovery;
+	int ret = 0;
+
+#if CONFIG_FDT_FIXUP_PARTITIONS
+	static struct node_info nodes[] = {
+		{ "jedec,spi-nor", MTD_DEV_TYPE_NOR, },
+		{ "fixed-partitions", MTD_DEV_TYPE_NAND },
+	};
+#endif
+
+	/* If GETEK configuration is not valid exit */
+	if (!getek_eeprom_is_valid())
+		return 0;
+
+	/* First make copy of the current ftd blob */
+	recovery = malloc(blob_size);
+	memcpy(recovery, blob, blob_size);
+
+	/* Execute fixups */
+	ret = getek_fdt_fixup(blob);
+	if (ret < 0)
+		goto exit_recover;
+
+#ifdef LCD_GETEK
+	/* Check if lcd is the default monitor */
+	if (lcd_getek_is_present()) {
+
+		/* Check RGB or LVDS mode should be enabled */
+		uint32_t id = LCD_GETEK_SATOZ_SAT043AT40D09RH;
+		if (id == LCD_GETEK_SATOZ_SAT043AT40D09RH)
+			ret = board_fix_lcd_getek_rgb(blob);
+		else
+			ret = board_fix_lcd_getek_lvds(blob);
+
+		if (ret < 0)
+			goto exit_recover;
+
+	}
+#endif
+
+#if CONFIG_FDT_FIXUP_PARTITIONS
+	fdt_fixup_mtdparts(blob, nodes, ARRAY_SIZE(nodes));
+#endif
+	return 0;
+
+exit_recover:
+	/* Copy back revocery blob */
+	printf("Recovering the FDT blob...\n");
+	memcpy(blob, recovery, blob_size);
+
+	return 0;
+}
+#endif
